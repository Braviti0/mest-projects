/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace JinGoFundMe {
  export type DonationRequestStruct = {
    beneficiaryAddress: AddressLike;
    beneficiaryName: string;
    donationPurpose: string;
    amountRequested: BigNumberish;
  };

  export type DonationRequestStructOutput = [
    beneficiaryAddress: string,
    beneficiaryName: string,
    donationPurpose: string,
    amountRequested: bigint
  ] & {
    beneficiaryAddress: string;
    beneficiaryName: string;
    donationPurpose: string;
    amountRequested: bigint;
  };
}

export interface JinGoFundMeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approveRequest"
      | "approvedRequests"
      | "beneficiaryPendingClaims"
      | "beneficiaryWithdrawnClaims"
      | "canWithdraw"
      | "donate"
      | "donateToRequest"
      | "donations"
      | "haltWithdrawals"
      | "hardlock"
      | "hardlocked"
      | "moderator"
      | "rejectRequest"
      | "resumeWithdrawals"
      | "submitRequest"
      | "totalClaimsWithdrawn"
      | "totalDonations"
      | "viewApprovedRequests"
      | "viewPendingRequests"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "approvedDonationRequest"
      | "claimed"
      | "donated"
      | "donatedToRequest"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approveRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedRequests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiaryPendingClaims",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiaryWithdrawnClaims",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "donate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "donateToRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "haltWithdrawals",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hardlock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hardlocked",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "moderator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rejectRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resumeWithdrawals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitRequest",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalClaimsWithdrawn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDonations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewApprovedRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewPendingRequests",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "approveRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beneficiaryPendingClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beneficiaryWithdrawnClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "donateToRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donations", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "haltWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hardlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hardlocked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "moderator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rejectRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resumeWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimsWithdrawn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDonations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewApprovedRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewPendingRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace approvedDonationRequestEvent {
  export type InputTuple = [
    beneficiary: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    beneficiary: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    beneficiary: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace claimedEvent {
  export type InputTuple = [
    beneficiary: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    beneficiary: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    beneficiary: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace donatedEvent {
  export type InputTuple = [
    donor: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish,
    donationId: BigNumberish
  ];
  export type OutputTuple = [
    donor: string,
    amount: bigint,
    timestamp: bigint,
    donationId: bigint
  ];
  export interface OutputObject {
    donor: string;
    amount: bigint;
    timestamp: bigint;
    donationId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace donatedToRequestEvent {
  export type InputTuple = [
    donor: AddressLike,
    beneficiary: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish,
    donationId: BigNumberish
  ];
  export type OutputTuple = [
    donor: string,
    beneficiary: string,
    amount: bigint,
    timestamp: bigint,
    donationId: bigint
  ];
  export interface OutputObject {
    donor: string;
    beneficiary: string;
    amount: bigint;
    timestamp: bigint;
    donationId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface JinGoFundMe extends BaseContract {
  connect(runner?: ContractRunner | null): JinGoFundMe;
  waitForDeployment(): Promise<this>;

  interface: JinGoFundMeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approveRequest: TypedContractMethod<
    [_requestId: BigNumberish],
    [void],
    "nonpayable"
  >;

  approvedRequests: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint] & {
        beneficiaryAddress: string;
        beneficiaryName: string;
        donationPurpose: string;
        amountRequested: bigint;
      }
    ],
    "view"
  >;

  beneficiaryPendingClaims: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  beneficiaryWithdrawnClaims: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  canWithdraw: TypedContractMethod<[], [boolean], "view">;

  donate: TypedContractMethod<[], [void], "payable">;

  donateToRequest: TypedContractMethod<
    [_requestId: BigNumberish],
    [void],
    "payable"
  >;

  donations: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, string] & {
        donorAddress: string;
        amountDonated: bigint;
        timestamp: bigint;
        beneficiaryAddress: string;
      }
    ],
    "view"
  >;

  haltWithdrawals: TypedContractMethod<[], [void], "nonpayable">;

  hardlock: TypedContractMethod<[], [void], "nonpayable">;

  hardlocked: TypedContractMethod<[], [boolean], "view">;

  moderator: TypedContractMethod<[], [string], "view">;

  rejectRequest: TypedContractMethod<
    [_requestId: BigNumberish],
    [void],
    "nonpayable"
  >;

  resumeWithdrawals: TypedContractMethod<[], [void], "nonpayable">;

  submitRequest: TypedContractMethod<
    [
      _beneficiaryName: string,
      _donationPurpose: string,
      _amountRequested: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  totalClaimsWithdrawn: TypedContractMethod<[], [bigint], "view">;

  totalDonations: TypedContractMethod<[], [bigint], "view">;

  viewApprovedRequests: TypedContractMethod<
    [],
    [JinGoFundMe.DonationRequestStructOutput[]],
    "view"
  >;

  viewPendingRequests: TypedContractMethod<
    [],
    [JinGoFundMe.DonationRequestStructOutput[]],
    "view"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approveRequest"
  ): TypedContractMethod<[_requestId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approvedRequests"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint] & {
        beneficiaryAddress: string;
        beneficiaryName: string;
        donationPurpose: string;
        amountRequested: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "beneficiaryPendingClaims"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "beneficiaryWithdrawnClaims"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "canWithdraw"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "donate"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "donateToRequest"
  ): TypedContractMethod<[_requestId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "donations"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, string] & {
        donorAddress: string;
        amountDonated: bigint;
        timestamp: bigint;
        beneficiaryAddress: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "haltWithdrawals"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "hardlock"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "hardlocked"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "moderator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rejectRequest"
  ): TypedContractMethod<[_requestId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resumeWithdrawals"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitRequest"
  ): TypedContractMethod<
    [
      _beneficiaryName: string,
      _donationPurpose: string,
      _amountRequested: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalClaimsWithdrawn"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalDonations"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "viewApprovedRequests"
  ): TypedContractMethod<
    [],
    [JinGoFundMe.DonationRequestStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "viewPendingRequests"
  ): TypedContractMethod<
    [],
    [JinGoFundMe.DonationRequestStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "approvedDonationRequest"
  ): TypedContractEvent<
    approvedDonationRequestEvent.InputTuple,
    approvedDonationRequestEvent.OutputTuple,
    approvedDonationRequestEvent.OutputObject
  >;
  getEvent(
    key: "claimed"
  ): TypedContractEvent<
    claimedEvent.InputTuple,
    claimedEvent.OutputTuple,
    claimedEvent.OutputObject
  >;
  getEvent(
    key: "donated"
  ): TypedContractEvent<
    donatedEvent.InputTuple,
    donatedEvent.OutputTuple,
    donatedEvent.OutputObject
  >;
  getEvent(
    key: "donatedToRequest"
  ): TypedContractEvent<
    donatedToRequestEvent.InputTuple,
    donatedToRequestEvent.OutputTuple,
    donatedToRequestEvent.OutputObject
  >;

  filters: {
    "approvedDonationRequest(address,uint256,uint256)": TypedContractEvent<
      approvedDonationRequestEvent.InputTuple,
      approvedDonationRequestEvent.OutputTuple,
      approvedDonationRequestEvent.OutputObject
    >;
    approvedDonationRequest: TypedContractEvent<
      approvedDonationRequestEvent.InputTuple,
      approvedDonationRequestEvent.OutputTuple,
      approvedDonationRequestEvent.OutputObject
    >;

    "claimed(address,uint256,uint256)": TypedContractEvent<
      claimedEvent.InputTuple,
      claimedEvent.OutputTuple,
      claimedEvent.OutputObject
    >;
    claimed: TypedContractEvent<
      claimedEvent.InputTuple,
      claimedEvent.OutputTuple,
      claimedEvent.OutputObject
    >;

    "donated(address,uint256,uint256,uint256)": TypedContractEvent<
      donatedEvent.InputTuple,
      donatedEvent.OutputTuple,
      donatedEvent.OutputObject
    >;
    donated: TypedContractEvent<
      donatedEvent.InputTuple,
      donatedEvent.OutputTuple,
      donatedEvent.OutputObject
    >;

    "donatedToRequest(address,address,uint256,uint256,uint256)": TypedContractEvent<
      donatedToRequestEvent.InputTuple,
      donatedToRequestEvent.OutputTuple,
      donatedToRequestEvent.OutputObject
    >;
    donatedToRequest: TypedContractEvent<
      donatedToRequestEvent.InputTuple,
      donatedToRequestEvent.OutputTuple,
      donatedToRequestEvent.OutputObject
    >;
  };
}
